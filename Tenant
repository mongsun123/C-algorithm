#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>
using namespace std;

struct TenantFavList {
    string User_Id;
    string User_Name;
    string Ads_Id;
    string Prop_Name;
    double Size;
    double Monthly_Rent;
    string Completion_year;
    string Location;
    string Property_Type;
    double Rooms;
    double Parking;
    double Bathroom;
    string Furnished;
    string Facilities;
    string Additional_facilities;
    string Region;
    string Payment_Status;
    TenantFavList* back;
    TenantFavList* next;
};

void Save_Favorite_Property(vector<TenantFavList>& properties, vector<TenantFavList>& favorites, TenantFavList* tenantFav) {
    cout << "Enter Ads Id to select property: ";
    cin >> tenantFav->Ads_Id;
    // Search for the favorite property in the vector
    bool propertyFound = false;

    for (int i = 0; i < properties.size(); i++) {
        TenantFavList& property = properties[i];
        if (property.Ads_Id == tenantFav->Ads_Id) {
            bool alreadyFavorited = false;
            for (int j = 0; j < favorites.size(); j++) {
                if (favorites[j].Ads_Id == property.Ads_Id) {
                    alreadyFavorited = true;
                    break;
                }
            }

            if (!alreadyFavorited) {
                *tenantFav = property;
                favorites.push_back(property);
                cout << "Favorite property saved: " << endl;
                cout << "Ads_Id: " << tenantFav->Ads_Id << endl;
                cout << "Prop_Name: " << tenantFav->Prop_Name << endl;
                cout << "Completion_year: " << tenantFav->Property_Type << endl << endl;
            }
            else {
                cout << "This property is already in your favorites list." << endl << endl;
            }
            propertyFound = true;
            break;
        }
    }
    if (!propertyFound) {
        cout << "Property with Ads_Id " << tenantFav->Ads_Id << " not found." << endl << endl;
    }
}

void Display_Fav_List(vector<TenantFavList>& favorites) {
    // Display the favorites list
    if (favorites.empty()) {

    }
    else {
        cout << "Your favorite properties: " << endl;
        for (int i = 0; i < favorites.size(); i++) {
            TenantFavList& property = favorites[i];
            cout << "Ads Id: " << property.Ads_Id << endl;
            cout << "Prop Name: " << property.Prop_Name << endl;
            cout << "Completion year: " << property.Property_Type << endl;
            cout << "Payment Status: " << property.Payment_Status << endl << endl;
        }
    }
}

void Add_To_Rent_From_Fav(vector<TenantFavList>& favorites) {
    if (favorites.empty()) {
        cout << "There are no favorite properties in your list " << endl;
    }
    else {
        string adsIdToRent;
        cout << "Enter Ads Id of the property from favorite list to rent: ";
        cin >> adsIdToRent;
        bool propertyFound = false;

        for (int i = 0; i < favorites.size(); i++) { // not const, since we might modify the property
            TenantFavList& property = favorites[i];
            if (property.Ads_Id == adsIdToRent) {
                // Property found in favorites, update its status and display a message
                property.Payment_Status = "Requested";
                cout << "Rent request has been placed for property: " << endl;
                cout << "Ads Id: " << property.Ads_Id << endl;
                cout << "Prop Name: " << property.Prop_Name << endl;
                cout << "Completion year: " << property.Property_Type << endl;
                cout << "Payment Status: " << property.Payment_Status << endl << endl;
                propertyFound = true;
                break;
            }
        }

        if (!propertyFound) {
            cout << "Property with Ads_Id " << adsIdToRent << " not found in your favorites." << endl << endl;
        }
    }
}

void Tenant_Main_Menu() {
    cout << "--------------------------------------------------------" << endl;
    cout << "Main Menu" << endl;
    cout << "1.Save Property" << endl;
    cout << "2. Place Rent Request" << endl;
    cout << "3. Logout" << endl;
}

int main() {
    User* userList = new User;
    userList = nullptr;
    int choice;string action; uid;
    int tenant_choice;
    string login;
    TenantFavList* tenantFav = new TenantFavList;
    vector<TenantFavList> properties;
    vector<TenantFavList> favorites;

    //ifstream to input file
    ifstream theFile("C:/Users/User/Desktop/Degree Year 2 Sem 2/Data Structure/mudah-apartment-kl-selangor.csv");
    if (!theFile.is_open()) {
        cout << "Error opening the file." << endl;
        return 1;
    }

    string line;
    getline(theFile, line); // Skip the header line (if it exists)
    while (getline(theFile, line)) {
        TenantFavList tenantFav;
        stringstream ss(line);
        getline(ss, tenantFav.Ads_Id, ',');
        getline(ss, tenantFav.Prop_Name, ',');
        getline(ss, tenantFav.Property_Type, ',');
        tenantFav.Payment_Status = "Pending";
        properties.push_back(tenantFav);
    }
    theFile.close();

    int tenant_choice;
            while (true) {
                Tenant_Main_Menu();
                cout << "Enter your choice: ";
                cin >> tenant_choice;
                
                if (tenant_choice == 3) {
                    cout << "Program exit" << endl;
                    break;
                }
                else if (tenant_choice == 1) {
                    Save_Favorite_Property(properties, favorites, tenantFav);
                }
                else if (tenant_choice == 2) {
                    Display_Fav_List(favorites);
                    string choice;
                    cout << "Enter 'yes' to continue, 'no' to back" << endl;
                    cin >> choice;
                    if(choice == "yes"){
                    Add_To_Rent_From_Fav(favorites);
                    }
                    else {
                        continue;
                    }
                }
                else if (tenant_choice == 3) {
                    cout << "Logout";
                    break;
                }
                else {
                    cout << "Wrong User" << endl;
                }
            }
        }
